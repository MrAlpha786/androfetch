#!/data/data/com.termux/files/usr/bin/bash

# Nerd font is preferred.
# Author : laraib07 (https://github.com/laraib07)

readonly CACHE_DIR="$HOME/.cache/androfetch"
readonly CACHE_FILE="$CACHE_DIR/cache"

# Colors
G='\033[1;32m' #green
W='\033[1;37m' #bold white
off='\033[0m'  #simple white


## FUNCTIONS

#Info printing
function fetch() {
  # Hide the cursor and disable line wrap.
  printf '\e[?25l\e[?7l\n'
  printf "${G}      ╲ ▁▂▂▂▁ ╱        ${user}${W}@${G}localhost \n"
  printf "${G}      ▄███████▄        ${W}----------------- \n"
  printf "${G}     ▄██ ███ ██▄       ${i_os}OS${off}: ${os} \n"
  printf "${G}    ▄███████████▄      ${i_host}Host${off}: ${model} \n"
  printf "${G} ▄█ ▄▄▄▄▄▄▄▄▄▄▄▄▄ █▄   ${i_ker}Kernel${off}: ${kernel} \n"
  printf "${G} ██ █████████████ ██   ${i_up}Uptime${off}: ${uptime} \n"
  printf "${G} ██ █████████████ ██   ${i_pkg}Packages${off}: ${pkg} \n"
  printf "${G} ██ █████████████ ██   ${i_sh}Shell${off}: ${shell} \n"
  printf "${G}    █████████████      ${i_term}Terminal${off}: termux \n"
  printf "${G}     ███████████       ${i_chip}Chipset${off}: ${chips} \n"
  printf "${G}      ██     ██        ${i_cpu}CPU${off}: ${cpuid} \n"
  printf "${G}      ██     ██        ${off}\n"

  printf "\e[?25h\e[?7h\n" # unhide cursor
}


function show_help() {
  printf "A pretty system information tool written in bash for termux on android.\n"
  printf "Usage: androfetch [-hci] [-n name]
  -h\t print this usage.
  -c\t build new cache.
  -i\t toggle icon visibility.
  -n\t set user name.\n"
}


function error() {
  printf "$(basename "$0"): $*\n" >&2
  exit 1
}


# Meslo Nerd font powerline icons
# if you don't use above font you can toggle
# icons to disable it with ’androfetch -i’
# by default its enabled.
function load_icons() {
  # 2 white-spaces are intentional to make whole output pretty with reasonable spacing
  i_os="${W}\uf6a6${G}  "
  i_host="${W}\uf6c3${G}  "
  i_ker="${W}\uf83c${G}  "
  i_up="${W}\uf49b${G}  "
  i_pkg="${W}\uf8d6${G}  "
  i_sh="${W}\ue7a2${G}  "
  i_term="${W}\uf489${G}  "
  i_chip="${W}\uf2db${G}  "
  i_cpu="${W}\ue266${G}  "
}


# funtion to set name to be displayed while fetching.
# Note: Don't set name on first run.
# let the cache be build first.
function set_name() {
  if [ -f "$CACHE_FILE" ];then
    sed -i "0,/^user.*/{s//user=\"$1\"/}" "$CACHE_FILE"
  else
    error "build cache first. Run without any option."
  fi
}


# toggle icon visibility if icons don't render well
function toggle_icons() {
  if [ -f "$CACHE_FILE" ];then
    if [[ "$show_icons" == true ]];then
      sed -i "0,/^show_icons.*/{s//show_icons=false/}" "$CACHE_FILE"
    else
      sed -i "0,/^show_icons.*/{s//show_icons=true/}" "$CACHE_FILE"
    fi

  else
    error "build cache first. Run without any option."
  fi
}


# Get shell name used by user
# and get version info if its zsh, bash or fish.
function get_shell() {
  case ${shell:=${SHELL##*/}} in
    bash)
      ver=$("$SHELL" -c "printf %s \"\$BASH_VERSION\"")
      shell+=" "${ver/-*}
      shell=${shell/\(*\)}
      ;;

    zsh)
      shell=$("$SHELL" --version)
      shell=${shell% *} # removing extra stuff
      ;;

    fish)
      ver=$("$SHELL" --version)
      shell+=" ${ver##* }"
      ;;
  esac
}


# Load frequently updated info first and then check
# cache for infrequent updated info like android
# version cpu and chipset.
function load_variables() {
  #Packages
  pkg="$(grep -c "Package:" $PREFIX/var/lib/dpkg/status) (dpkg)"

  #Uptime
  uptime=$(uptime -p)
  uptime=${uptime:3} # removing 'up '
  uptime=${uptime/hours/hrs}
  uptime=${uptime/minutes/mins}

  #shell
  get_shell

  # checking cache
  if ! [ -f "$CACHE_FILE" ];then

    #user
    user=${user:=$(logname)}
    printf "user=\"${user}\"\n" > "$CACHE_FILE"

    #model
    model=$(getprop ro.product.manufacturer)" "$(getprop ro.product.model)
    printf "model=\"${model}\"\n" >> "$CACHE_FILE"

    #OS
    os="Android $(getprop ro.build.version.release)"
    printf "os=\"${os}\"\n" >> "$CACHE_FILE"

    #kernel
    kernel=$(uname -r)
    kernel=${kernel%%-*}
    printf "kernel=\"${kernel}\"\n" >> "$CACHE_FILE"


    #CPU
    cpuid=$(cat /proc/cpuinfo|grep "Hardware")
    cpuid=${cpuid##?*: }
    cpuid=${cpuid%,*}
    printf "cpuid=\"${cpuid}\"\n" >> "$CACHE_FILE"

    #chipset
    chips=$(getprop ro.board.platform)
    printf "chips=\"${chips}\"\n" >> "$CACHE_FILE"

    #show icons
    show_icons=${show_icons:=true}
    printf "show_icons=\"${show_icons}\"\n" >> "$CACHE_FILE"
  fi
}


function main() {
  while getopts ":hcin:" arg ; do
    case "${arg}" in
      h ) show_help; exit 0 ;;
      c ) rm -f "$CACHE_FILE" ;;
      i ) toggle_icons ; exit 0 ;;
      n ) set_name "$OPTARG" ; exit 0 ;;
      \?) error "unknown option.";exit 1 ;;
    esac
  done

  ## Start fetching
  if [[ "$show_icons" == true ]]; then
    load_icons
  fi

  load_variables
  fetch

  exit 0
}


# checking cache dir
if ! [ -d "$CACHE_DIR" ];then
  mkdir -p "$CACHE_DIR"
fi


# sourcing cache -: it must be above main
# otherwise username will be overwritten everytime
# building new cache.
if [ -f "$CACHE_FILE" ];then
  source "$CACHE_FILE"
fi

main "$@"
